{"version":3,"sources":["reportWebVitals.js","context/auth.js","util/AuthRoute.js","component/MenuBar.js","util/graphql.js","component/LikeButton.js","component/DeleteButton.js","component/PostCard.js","util/hooks.js","component/PostForm.js","pages/Home.js","pages/Login.js","pages/Registro.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","handleItemClick","e","name","setActiveItem","pathname","window","location","path","substr","useState","activeItem","Menu","pointing","secondary","size","color","Item","active","onClick","as","Link","position","FETCH_POSTS_QUERY","gql","LIKE_POST_MUTATION","FETCH_POST_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","SUBMIT_COMMENT_MUTATION","LikeButton","post","id","likesCount","likes","liked","setLiked","useEffect","find","username","useMutation","variables","postId","likePost","likeButton","Popup","content","inverted","trigger","Button","Icon","basic","labelPosition","Label","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","refetchQueries","query","update","proxy","deletePostOrComment","floated","style","margin","Confirm","open","onCancel","console","log","onConfirm","PostCard","body","createdAt","commentsCount","Card","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","data","readQuery","writeQuery","getAllPosts","onError","err","error","Form","Container","textAlign","marginBottom","Field","Input","placeholder","className","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","map","LOGIN_USER","Login","context","errors","SetErrors","loginUser","password","_","history","push","extensions","noValidate","label","primary","Object","keys","length","REGISTER_USER","Registro","addUser","email","confirmPassword","register","SinglePost","postMarkup","match","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","fluid","CardContent","ref","disabled","trim","CardHeader","fontWeight","App","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c5f76b2f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { createContext, useReducer } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst initialState = {\r\n  user: null\r\n};\r\n\r\nif (localStorage.getItem(\"jwtToken\")) {\r\n  const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => {},\r\n  logout: () => {}\r\n});\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n    case \"LOGOUT\":\r\n      return {\r\n        ...state,\r\n        user: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  function login(userData) {\r\n    localStorage.setItem(\"jwtToken\", userData.token);\r\n    dispatch({\r\n      type: \"LOGIN\",\r\n      payload: userData\r\n    });\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    dispatch({ type: \"LOGOUT\" });\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user: state.user, login, logout }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nfunction AuthRoute({ component: Component, ...rest }) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nfunction MenuBar() {\r\n  const { user, logout } = useContext(AuthContext);\r\n  const handleItemClick = (e, { name }) => setActiveItem(name);\r\n  const pathname = window.location.pathname;\r\n  const path = pathname === \"/\" ? \"home\" : pathname.substr(1);\r\n  const [activeItem, setActiveItem] = useState(path);\r\n\r\n  const menuBar = user ? (\r\n    <Menu pointing secondary size=\"massive\" color=\"blue\">\r\n      <Menu.Item\r\n        name=\"Inicio\"\r\n        active={activeItem === \"home\"}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n        to=\"/\"\r\n      />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item name=\"Cerrar Sesión\" onClick={logout} />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  ) : (\r\n    <Menu pointing secondary size=\"massive\" color=\"blue\">\r\n      <Menu.Item\r\n        name=\"Inicio\"\r\n        active={activeItem === \"home\"}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n        to=\"/\"\r\n      />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item\r\n          name=\"Iniciar Sesión\"\r\n          active={activeItem === \"login\"}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/login\"\r\n        />\r\n        <Menu.Item\r\n          name=\"Registrarse\"\r\n          active={activeItem === \"register\"}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/registro\"\r\n        />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n\r\n  return menuBar;\r\n}\r\n\r\nexport default MenuBar;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n  {\r\n    getAllPosts {\r\n      id\r\n      body\r\n      username\r\n      createdAt\r\n      commentsCount\r\n      comments {\r\n        id\r\n        createdAt\r\n        username\r\n        body\r\n      }\r\n      likesCount\r\n      likes {\r\n        id\r\n        createdAt\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      likesCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FETCH_POST_QUERY = gql`\r\n  query($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likesCount\r\n      likes {\r\n        username\r\n      }\r\n      commentsCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nexport const DELETE_COMMENT_MUTATION = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n      commentsCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SUBMIT_COMMENT_MUTATION = gql`\r\n  mutation($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n      commentsCount\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Button, Label, Icon, Popup } from \"semantic-ui-react\";\r\n\r\nimport { LIKE_POST_MUTATION } from \"../util/graphql\";\r\n\r\nfunction LikeButton({ user, post: { id, likesCount, likes } }) {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((likes) => likes.username === user.username)) {\r\n      setLiked(true);\r\n    } else setLiked(false);\r\n  }, [user, likes]);\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  });\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Popup\r\n        content=\"Quitar like\"\r\n        inverted\r\n        trigger={\r\n          <Button color=\"red\">\r\n            <Icon name=\"heart\" />\r\n          </Button>\r\n        }\r\n      />\r\n    ) : (\r\n      <Popup\r\n        content=\"Dar like\"\r\n        inverted\r\n        trigger={\r\n          <Button color=\"red\" basic>\r\n            <Icon name=\"heart\" />\r\n          </Button>\r\n        }\r\n      />\r\n    )\r\n  ) : (\r\n    <Button as={Link} to=\"/login\" color=\"red\" basic>\r\n      <Icon name=\"heart\" />\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n      {likeButton}\r\n      <Label as=\"a\" basic color=\"red\" pointing=\"left\">\r\n        {likesCount}\r\n      </Label>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default LikeButton;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Button, Confirm, Icon, Popup } from \"semantic-ui-react\";\r\n\r\nimport {\r\n  DELETE_POST_MUTATION,\r\n  FETCH_POSTS_QUERY,\r\n  DELETE_COMMENT_MUTATION\r\n} from \"../util/graphql\";\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n  const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\r\n\r\n  const [deletePostOrComment] = useMutation(mutation, {\r\n    refetchQueries: [{ query: FETCH_POSTS_QUERY }],\r\n\r\n    update(proxy) {\r\n      setConfirmOpen(false);\r\n\r\n      if (callback) callback();\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId\r\n    }\r\n  });\r\n  return (\r\n    <>\r\n      <Popup\r\n        content={commentId ? \"Eliminar comentario\" : \"Eliminar publicación\"}\r\n        inverted\r\n        trigger={\r\n          <Button\r\n            as=\"div\"\r\n            color=\"red\"\r\n            floated=\"right\"\r\n            onClick={() => setConfirmOpen(true)}\r\n          >\r\n            <Icon name=\"trash\" style={{ margin: 0 }} />\r\n          </Button>\r\n        }\r\n      />\r\n      <Confirm\r\n        open={confirmOpen}\r\n        onCancel={() => {\r\n          console.log(postId);\r\n          setConfirmOpen(false);\r\n        }}\r\n        onConfirm={deletePostOrComment}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Card, Icon, Label, Image, Popup } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nfunction PostCard({\r\n  post: { body, createdAt, id, username, likes, commentsCount, likesCount }\r\n}) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          size=\"mini\"\r\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n        />\r\n        <Card.Header>@{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/post/${id}`}>\r\n          {moment(createdAt).fromNow()}\r\n        </Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Popup\r\n          content=\"Click para comentar\"\r\n          inverted\r\n          trigger={<LikeButton user={user} post={{ id, likes, likesCount }} />}\r\n        />\r\n        <Button labelPosition=\"right\" as={Link} to={`/post/${id}`}>\r\n          <Popup\r\n            content=\"Comentar publicación\"\r\n            inverted\r\n            trigger={\r\n              <Button color=\"blue\" basic>\r\n                <Icon name=\"comments\" />\r\n              </Button>\r\n            }\r\n          />\r\n\r\n          <Label as=\"a\" basic color=\"blue\" pointing=\"left\">\r\n            {commentsCount}\r\n          </Label>\r\n        </Button>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostCard;\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const onChange = (event) => {\r\n    setValues({ ...values, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    callback();\r\n  };\r\n\r\n  return {\r\n    onChange,\r\n    onSubmit,\r\n    values\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Container, Form } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport { useForm } from \"../util/hooks\";\r\nimport { FETCH_POSTS_QUERY } from \"../util/graphql\";\r\n\r\nfunction PostForm() {\r\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n    body: \"\"\r\n  });\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY\r\n      });\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: {\r\n          getAllPosts: [result.data.createPost, ...data.getAllPosts]\r\n        }\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    }\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <Container textAlign=\"justified\" style={{ marginBottom: 20 }}>\r\n          <h2>Crea una nueva publicacion</h2>\r\n        </Container>\r\n\r\n        <Form.Field>\r\n          <Form.Input\r\n            placeholder=\"Saluda a tus amigos!\"\r\n            name=\"body\"\r\n            onChange={onChange}\r\n            value={values.body}\r\n            error={error ? true : false}\r\n          />\r\n          <Container textAlign=\"right\">\r\n            <Button type=\"submit\" color=\"orange\">\r\n              Publicar\r\n            </Button>\r\n          </Container>\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\r\n          <ul className=\"list\">\r\n            <li>{error.graphQLErrors[0].message}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      username\r\n      body\r\n      createdAt\r\n      likes {\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likesCount\r\n      comments {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentsCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;\r\n","import React, { useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Container,\r\n  Grid\r\n} from \"semantic-ui-react\";\r\n\r\nimport PostCard from \"../component/PostCard\";\r\nimport PostForm from \"../component/PostForm\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport { FETCH_POSTS_QUERY } from \"../util/graphql\";\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const { loading, data: { getAllPosts: posts } = {} } = useQuery(\r\n    FETCH_POSTS_QUERY\r\n  );\r\n\r\n  return (\r\n    <Grid columns={3}>\r\n      <Grid.Row>\r\n        <Container textAlign=\"center\">\r\n          <h1>\r\n            {/* <p>Hola {user ? user.username : null}</p> */}\r\n            Publicaciones Recientes\r\n          </h1>\r\n        </Container>\r\n      </Grid.Row>\r\n\r\n      <Grid.Row>\r\n        <Grid.Column>\r\n          {user && (\r\n            <Grid.Column>\r\n              <PostForm />\r\n            </Grid.Column>\r\n          )}\r\n        </Grid.Column>\r\n\r\n        {loading ? (\r\n          <h1> Cargando...</h1>\r\n        ) : (\r\n          posts &&\r\n          posts.map((post) => (\r\n            <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\r\n              <PostCard post={post} />\r\n            </Grid.Column>\r\n          ))\r\n        )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\nimport { useForm } from \"../util/hooks\";\r\n\r\nfunction Login(props) {\r\n  const context = useContext(AuthContext);\r\n  const [errors, SetErrors] = useState({});\r\n\r\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\r\n    username: \"\",\r\n    password: \"\"\r\n  });\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: { login: userData } }) {\r\n      context.login(userData);\r\n      props.history.push(\"/\");\r\n    },\r\n    onError(err) {\r\n      SetErrors(err.graphQLErrors[0].extensions.errors);\r\n    },\r\n    variables: values\r\n  });\r\n\r\n  function loginUserCallback() {\r\n    loginUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n        <h1>Iniciar Sesión</h1>\r\n        <Form.Input\r\n          label=\"Nombre de usuario\"\r\n          placeholder=\"Nombre de usuario..\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Contraseña\"\r\n          placeholder=\"Contraseña..\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Iniciar Sesión\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\nimport { useForm } from \"../util/hooks\";\r\n\r\nfunction Registro(props) {\r\n  const context = useContext(AuthContext);\r\n  const [errors, SetErrors] = useState({});\r\n\r\n  const { onChange, onSubmit, values } = useForm(registerUser, {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\"\r\n  });\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: { register: userData } }) {\r\n      context.login(userData);\r\n      props.history.push(\"/\");\r\n    },\r\n    onError(err) {\r\n      SetErrors(err.graphQLErrors[0].extensions.errors);\r\n    },\r\n    variables: values\r\n  });\r\n\r\n  function registerUser() {\r\n    addUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n        <h1>Crear una cuenta</h1>\r\n        <Form.Input\r\n          label=\"Nombre de usuario\"\r\n          placeholder=\"Nombre de usuario..\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placeholder=\"Email..\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          error={errors.email ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Contraseña\"\r\n          placeholder=\"Contraseña..\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Confirmar Contraseña\"\r\n          placeholder=\"Confirmar Contraseña..\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          value={values.confirmPassword}\r\n          error={errors.confirmPassword ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Registrarse!\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Registro;\r\n","import React, { useContext, useRef, useState } from \"react\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Icon,\r\n  Label,\r\n  Image,\r\n  Grid,\r\n  CardContent,\r\n  CardHeader\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nimport { FETCH_POST_QUERY, SUBMIT_COMMENT_MUTATION } from \"../util/graphql\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport LikeButton from \"../component/LikeButton\";\r\nimport DeleteButton from \"../component/DeleteButton\";\r\n\r\nfunction SinglePost(props) {\r\n  const postId = props.match.params.postId;\r\n  const { user } = useContext(AuthContext);\r\n  const commentInputRef = useRef(null);\r\n\r\n  const [comment, setComment] = useState(\"\");\r\n  //Asigno a getPost un object vacio\r\n  const { data: { getPost } = {} } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId\r\n    }\r\n  });\r\n\r\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment(\"\");\r\n      commentInputRef.current.blur();\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment\r\n    }\r\n  });\r\n\r\n  function deletePostCallback() {\r\n    props.history.push(\"/\");\r\n  }\r\n\r\n  let postMarkup;\r\n\r\n  if (!getPost) {\r\n    postMarkup = <p>Loading post...</p>;\r\n  } else {\r\n    const {\r\n      id,\r\n      body,\r\n      createdAt,\r\n      username,\r\n      comments,\r\n      likes,\r\n      likesCount,\r\n      commentsCount\r\n    } = getPost;\r\n\r\n    postMarkup = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width=\"2\">\r\n            <Image\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n              size=\"small\"\r\n              float=\"right\"\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width=\"10\">\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>@{username}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likesCount, likes }} />\r\n                <Button\r\n                  as=\"div\"\r\n                  labelPosition=\"right\"\r\n                  onClick={() => console.log(\"comentando\")}\r\n                >\r\n                  <Button basic color=\"blue\">\r\n                    <Icon name=\"comments\" />\r\n                  </Button>\r\n                  <Label basic color=\"blue\" pointing=\"left\">\r\n                    {commentsCount}\r\n                  </Label>\r\n                </Button>\r\n                {user && user.username === username && (\r\n                  <DeleteButton postId={id} callback={deletePostCallback} />\r\n                )}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && (\r\n              <Card fluid>\r\n                <CardContent>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Escribe un comentario..\"\r\n                        name=\"comment\"\r\n                        value={comment}\r\n                        onChange={(event) => setComment(event.target.value)}\r\n                        ref={commentInputRef}\r\n                      />\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"ui button blue\"\r\n                        disabled={comment.trim() === \"\"}\r\n                        onClick={submitComment}\r\n                      >\r\n                        Enviar\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n            {comments.map((comment) => (\r\n              <Card fluid key={comment.id}>\r\n                <CardContent>\r\n                  {user && user.username === comment.username && (\r\n                    <DeleteButton postId={id} commentId={comment.id} />\r\n                  )}\r\n                  <CardHeader>\r\n                    <p>@{comment.username}</p>\r\n                  </CardHeader>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                  <Card.Description>\r\n                    <p style={{ fontWeight: \"bold\" }}>{comment.body}</p>\r\n                  </Card.Description>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nexport default SinglePost;\r\n","import { from } from \"@apollo/client\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nimport { AuthProvider } from \"./context/auth\";\nimport AuthRoute from \"./util/AuthRoute.js\";\nimport MenuBar from \"./component/MenuBar\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Registro from \"./pages/Registro\";\nimport SinglePost from \"./pages/SinglePost\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/registro\" component={Registro} />\n          <Route exact path=\"/post/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport App from \"./App\";\r\nimport {\r\n  ApolloClient,\r\n  createHttpLink,\r\n  InMemoryCache,\r\n  ApolloProvider\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"apollo-link-context\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \" https://protected-waters-59335.herokuapp.com/\"\r\n});\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem(\"jwtToken\");\r\n  return {\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : \"\"\r\n    }\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App></App>\r\n  </ApolloProvider>\r\n);\r\n","import ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ApolloProvider from \"./ApolloProvider\";\n\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}